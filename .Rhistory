ls()
x <-9
ls()
dir()
?list.files
args()
list.files(args())
args(list.files)
old.dir <- getwd()
dir.create("testdir"
)
ls()
getwd()
list.files
list.files()
setwd("testdir")
file.create("mytest.R")
ls()
list.files
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.info("mytest.R")$mode
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
old.dir
setwd(old.dir)
?unlink
ls()
rm(list=ls())
ls()
getwd()
list.file()
list.files()
unlink("testdir", recursive = TRUE)
list.files()
1:20
pi:10
15:1
?:
:
`:`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(0, 10, length=0.5)
seq(0, 10, length=30)
my_seq <- seq(0, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along,with = my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
num_vect < 1
tf <- num_vect < 1
tf
tf <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collaspe = " ")
paste(my_char, collaspe = " ")
paste(my_char, collaspe = " ")
paste(my_char, collaspe = " ")
?paste
paste(my_char, sep = " ")
paste(my_char, collaspe = " ")
?collapse
paste(my_char, collaspe = " ")
info()
paste(my_char, collaspe = " ")
paste(my_char, sep = " ", collaspe = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Bruce")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
library(swirl)
rm(list=ls())
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
inf - inf
Inf - Inf
X <- rep(NA, 20)
X <- c(rnorm(20), rep(NA, 20)
)
x
x[1:10]
x(is.na(x))
x[is.na(x)]
y <-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
c(3, 5, 6)
c(3, 5, 7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect2, vect)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vecto) <- c(4, 5)
dim(my_vectr) <- c(4, 5)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 = matrix(1:20, 4, 5)
my_matrix2
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c(patient", "age",
| "weight", "bp", "rating", "test")
cnames <- c(patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(my_data)
colnames(my_data) <- cnames
my_data
0
library(swirl)
swirl()
rm(list == ls())
rm(list = ls())
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 == 7
!5 == 7
FALSE &FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function <- function(x) {}
submit()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
args(remainder)
submit()
submit()
submit()
evaluate(c(1.4,
| 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[x.length()]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Suwen", "Gu", "Awesome")
telegram("Suwen", "Gu", "Awesome")
submit()
submit()
submit()
mad_libs(place = "Shanghai", adjective = "awesome", noun = "food")
submit()
'I' %p% 'love' %p% 'R!'
siwrl()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
identical(t1, t2)
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
UseMethod("weekdays")
weekdays(d1)
montsh(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if (x > 5) {}
if (x > 5) {x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {}
f <- function(x) {z}
z <- 10
f(1)
f <- function(x) {z <- 101 z}
f <- function(x) {z <- 101 z}
f <- function(x) {z <- 101
z}
z <- 1
f(2)
library(swirl)
rm(list = ls())
ls()
swirl()
head(flags)
?head
dim(flags)
class(flags)
as.list(fligs)
as.list(flags)
lapply(flags, class)
cls <- lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flags_color, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
lapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
table(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
head(plants, 19)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str()plants
str(plants)
?sample
sample91:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
sample(LETTERS)
LETTERS
sample(LETTERS)
sample(c(0,1), 100)
sample(c(0,1), 100, replace = 'FALSE', prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = FALSE, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = 'TRUE', prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips, 1)
sum(flips,)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips)
sum(flips, 1)
sum(flips2)
?rnorm
rbinom
?rbinom
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
>plot
?plot
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, "Speed")
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars,sub = "My Plot Subtitle")
?plot
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot( formulat = mpg ~ cyl, data = mtcars)
boxplot( formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
rm(list = ls())
library(datasets)
data("iris")
?iris
iris
iris?virginica
iris$virginica
mean(Speal.length)
mean(iris$Sepal.Length)
sapply(iris, mean)
sapply(iris$Sepal.Length, mean)
iris[Specis == "virginica"]
iris[virginica]
iris[iris$virginica]
iris[Species == "virginica"]
iris[irirs$Species == "virginica"]
iris[irirs$Species]
iris[irirs$Species, ]
iris[iris$Species, ]
iris[iris$Species == 'virginica', ]
sapply(iris[iris$Species == 'virginica', ], mean)
mean(iris[iris$Species == 'virginica', ][, 1])
?apply
apply(iris[, 1:4], 2m mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
?wiith
?with
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(mtcars, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364 - 19.74286
debug(ls)
ls
ls()
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364 - 15.1
apply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
help("<<-")
setwd("C:/Users/superbrucegu/Desktop/data_science/R/programming_assignment")
?solve
